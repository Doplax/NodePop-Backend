{
    // `env` specifies the environments your code is designed to run in. Each environment brings with it certain global variables.
    "env": {
      "browser": false, // Indicates that the code will run in a browser environment (makes globals like `window` and `document` available).
      "commonjs": true, // Enables support for CommonJS style require/export (used in Node.js environments).
      "es2021": true // Specifies that the code is written using ES2021 features, allowing ESLint to understand modern JavaScript syntax.
    },
    // `extends` allows inheriting configurations from other sources. "standard" is a popular style guide enforcing certain formatting rules and best practices.
    "extends": "standard",
    // `parserOptions` specifies options for the parser used by ESLint.
    "parserOptions": {
      "ecmaVersion": "latest" // Sets the version of ECMAScript used for parsing, "latest" ensures ESLint uses the most recent version supported.
    },
    // `rules` allows you to define how ESLint will apply specific rules to your code. You can configure them to be warnings or errors.
    "rules": {
      "spaced-comment": 0,
      "no-unused-vars": "warn", // Warns about variables that are declared but not used.
      "no-undef": "error", // Errors when using variables that are not declared, useful for catching typographical and scope errors.
      "import/no-unresolved": "error", // Errors for imports that ESLint can't resolve, useful to ensure your module paths are correct.
      "indent": ["error", 2], // Enforces consistent indentation of 2 spaces.
      "linebreak-style": ["error", "unix"], // Enforces the use of Unix line endings: `\n` for line breaks.
      "quotes": ["error", "double"], // Enforces the use of single quotes for strings.
      "semi": ["error", "always"] // Requires the use of semicolons at the end of statements.
    }
  }
  